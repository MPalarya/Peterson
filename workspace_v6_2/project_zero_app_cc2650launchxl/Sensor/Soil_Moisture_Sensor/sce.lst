               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6871                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 786f                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6871                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6873                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c6f                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 186f                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skip
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c70                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skip:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               pFwTaskInitializeFuncTable:
0068 ---- 007e                         dw          #soilMoistureSensor/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0083                         dw          #soilMoistureSensor/execute
               pFwTaskTerminateFuncTable:
006a ---- 00c6                         dw          #soilMoistureSensor/terminate
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
               
               ; External control data, shared with the driver
               fwCtrlExt:
006f ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0070 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0071 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0072 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0073 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: Soil Moisture Sensor"
               soilMoistureSensor/cfg:
               soilMoistureSensor/cfg/hysteresis:
0074 ---- 0032                         dw          #50
               soilMoistureSensor/cfg/pBinThresholds:
0075 ---- 0000                         dw          #0
0076 ---- 0000                         dw          #0
0077 ---- 0000                         dw          #0
0078 ---- 0000                         dw          #0
0079 ---- 0000                         dw          #0
007a ---- 0000                         dw          #0
               soilMoistureSensor/input:
               soilMoistureSensor/output:
               soilMoistureSensor/output/bin:
007b ---- 0000                         dw          #0
               soilMoistureSensor/state:
               soilMoistureSensor/state/adcValue:
007c ---- 0000                         dw          #0
               soilMoistureSensor/state/forceOutput:
007d ---- 0001                         dw          #1
               .segment end "Task: Soil Moisture Sensor"
               
               
               .segment begin "Task: Soil Moisture Sensor"
               soilMoistureSensor/initialize:
               ;? // Select ADC input
               ;? adcSelectGpioInput(AUXIO_A_S_M_OUTPUT);
007e ---- 7005                         ld          R7, #5
007f ---- 14c7                         jsr         AdccompbSelectGpioInput
               ;? 
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0080 ---- 0001                         ld          R0, #1
0081 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               soilMoistureSensor/initializeDone:
0082 ---- adb7                         rts         
               
               
               
               
               soilMoistureSensor/execute:
               ;? // Power up the light sensor and wait for it to get ready
               ;? gpioSetOutput(AUXIO_O_S_M_POWER);
0083 ---- 740e                         iobset      #(4 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (4 >> 3))]
               ;? fwDelayUs(1000, FW_DELAY_RANGE_1_MS);
0084 ---- 70bc                         ld          R7, #(((1000 * 24 ) + ((1 << 7) - 1)) >> 7)
0085 ---- 6007                         ld          R6, #7
0086 ---- 14d4                         jsr         FwDelay
               ;? 
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);
0087 ---- 705d                         ld          R7, #(((32 - 1) * 24) >> 3)
0088 ---- 6003                         ld          R6, #3
0089 ---- 14d4                         jsr         FwDelay
008a ---- 7041                         ld          R7, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
008b ---- 1462                         jsr         AdiDdiAcquire
008c ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
008d 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
008f ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0112:
0090 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0091 ---- a6fe                         biob0       /id0112
0092 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0093 ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0094 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0095 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0096 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0097 ---- fd47                         nop         
0098 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0099 ---- 1465                         jsr         AdiDdiRelease
               ;? 
               ;? // Sample the light sensor
               ;? S16 adcValue;
               ;? adcGenManualTrigger();
009a ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue);
009b ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
009c ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
009d ---- fdb1                         wev1        #WEVSEL_PROG
009e ---- 9902                         in          R1, [#IOP_ANAIF_ADCFIFO]
               ;? state.adcValue = adcValue;
009f ---- 1c7c                         st          R1, [#soilMoistureSensor/state/adcValue]
               ;? 
               ;? // Disable the ADC
               ;? adcDisable();
00a0 ---- 14da                         jsr         AdcDisable
               ;? 
               ;? // Power down the light sensor
               ;? gpioClearOutput(AUXIO_O_S_M_POWER);
00a1 ---- 540e                         iobclr      #(4 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (4 >> 3))]
               ;? 
               ;? // Get the minimum and maximum for the current bin
               ;? U16 bin = output.bin;
00a2 ---- 787b                         ld          R7, [#soilMoistureSensor/output/bin]
               ;? S16* pThreshold = #cfg.pBinThresholds + bin;
00a3 ---- 0075                         ld          R0, #(soilMoistureSensor/cfg/pBinThresholds + 0)
00a4 ---- 8d27                         add         R0, R7
               ;? S16 min = *(pThreshold++) - cfg.hysteresis;
00a5 ---- af10                         ld          R2, [R0++]
00a6 ---- 3874                         ld          R3, [#soilMoistureSensor/cfg/hysteresis]
00a7 ---- ad1b                         sub         R2, R3
               ;? S16 max = *(pThreshold++) + cfg.hysteresis;
00a8 ---- bf10                         ld          R3, [R0++]
00a9 ---- 0874                         ld          R0, [#soilMoistureSensor/cfg/hysteresis]
00aa ---- bd20                         add         R3, R0
               ;? 
               ;? // Check if we need to generate output
               ;? U16 doOutput = state.forceOutput;
00ab ---- 087d                         ld          R0, [#soilMoistureSensor/state/forceOutput]
               ;? if (adcValue < min) {
00ac ---- 9d2a                         cmp         R1, R2
00ad ---- e601                         bges        /id0127
               ;?     doOutput = 1;
00ae ---- 0001                             ld          R0, #1
               ;? }
               /id0127:
               ;? if (adcValue > max) {
00af ---- 9d2b                         cmp         R1, R3
00b0 ---- fe01                         bles        /id0131
               ;?     doOutput = 1;
00b1 ---- 0001                             ld          R0, #1
               ;? }
               /id0131:
               ;? 
               ;? // If output is needed, find the new bin value and notify the driver ...
               ;? if (doOutput == 1) {
00b2 ---- 8a01                         cmp         R0, #1
00b3 ---- be0f                         bneq        /id0135
               ;? 
               ;?     // For each bin ...
               ;?     for (U16 n = 0; n < BIN_COUNT; n++) {
00b4 ---- 0000                             ld          R0, #0
               /id0142:
               ;? 
               ;?         // If the ADC value is larger, move up one bin
               ;?         if (adcValue >= cfg.pBinThresholds[n]) {
00b5 ---- 2075                                 ld          R2, #(soilMoistureSensor/cfg/pBinThresholds + 0)
00b6 ---- af1a                                 ld          R2, [R2+R0]
00b7 ---- 9d2a                                 cmp         R1, R2
00b8 ---- ee01                                 blts        /id0137
               ;?             bin = n;
00b9 ---- fd40                                     ld          R7, R0
               ;?         }
               /id0137:
               ;?     }
00ba ---- 8801                             add         R0, #1
00bb ---- 8a05                             cmp         R0, #5
00bc ---- aef8                             bltu        /id0142
               ;? 
               ;?     // Output the new bin value
               ;?     output.bin = bin;
00bd ---- 7c7b                             st          R7, [#soilMoistureSensor/output/bin]
               ;?     state.forceOutput = 0;
00be ---- 0000                             ld          R0, #0
00bf ---- 0c7d                             st          R0, [#soilMoistureSensor/state/forceOutput]
               ;? 
               ;?     // Notify the driver
               ;?     fwGenAlertInterrupt();
00c0 ---- 086c                             ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00c1 ---- 8201                             or          R0, #(1 << 0)
00c2 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? }
               /id0135:
               ;? 
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00c3 ---- 0001                         ld          R0, #1
00c4 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               soilMoistureSensor/executeDone:
00c5 ---- adb7                         rts         
               
               
               
               
               soilMoistureSensor/terminate:
               soilMoistureSensor/terminateDone:
00c6 ---- adb7                         rts         
               .segment end "Task: Soil Moisture Sensor"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00c7 ---- f007                         and         R7, #0x0007
               
                                       ; Disconnect all signals
00c8 ---- 1462                         jsr         AdiDdiAcquire
00c9 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00cb ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]
               
                                       ; Connect the specified GPIO
00cc 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00ce ---- ed8f                         lsr         R6, R7
00cf ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
               
                                       ; Ensure that it has taken effect
00d0 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00d1 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
00d2 ---- 1465                         jsr         AdiDdiRelease
00d3 ---- adb7                         rts
               
               
               
               
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
00d4 ---- fb0c                         out         R7, [#IOP_TIMER_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
00d5 ---- eda4                         lsl         R6, #4
00d6 ---- eb09                         out         R6, [#IOP_TIMER_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
00d7 ---- 640b                         iobset      #0, [#IOP_TIMER_T0CTL]
00d8 ---- cdb1                         wev1        #WEVSEL_TIMER0
00d9 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
00da ---- 1462                         jsr         AdiDdiAcquire
00db ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
00dc ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]
               
                                       ; Assert reset and disable the ADC
00dd ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
00de ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
               
                                       ; Ensure that it has taken effect
00df ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00e0 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00e1 ---- 1465                         jsr         AdiDdiRelease
               
                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
00e2 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               
                                       ; Disable the ADC data interface
00e3 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]
               
00e4 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by DESKTOP-CH7LS9R at 2017-02-11 12:11:02.853
